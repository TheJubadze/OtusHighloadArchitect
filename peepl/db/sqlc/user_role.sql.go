// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_role.sql

package db

import (
	"context"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_roles (
  role
) VALUES (
  $1
)
RETURNING id, role
`

func (q *Queries) CreateUserRole(ctx context.Context, role string) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRole, role)
	var i UserRole
	err := row.Scan(&i.ID, &i.Role)
	return i, err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM user_roles WHERE id = $1
`

func (q *Queries) DeleteUserRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserRole, id)
	return err
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, role FROM user_roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserRole(ctx context.Context, id int32) (UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRole, id)
	var i UserRole
	err := row.Scan(&i.ID, &i.Role)
	return i, err
}

const listUserRoles = `-- name: ListUserRoles :many
SELECT id, role FROM user_roles
ORDER BY role
LIMIT $1
OFFSET $2
`

type ListUserRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserRoles(ctx context.Context, arg ListUserRolesParams) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, listUserRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.ID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE user_roles SET role = $1
RETURNING id, role
`

func (q *Queries) UpdateUserRole(ctx context.Context, role string) (UserRole, error) {
	row := q.db.QueryRow(ctx, updateUserRole, role)
	var i UserRole
	err := row.Scan(&i.ID, &i.Role)
	return i, err
}
